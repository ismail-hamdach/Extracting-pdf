[
  {
    "q": "2. What are the Advantages of Source Code Management? ",
    "rep": [
      "Helps in Achieving teamwork. Can work on different featuressimultaneously. Acts like pipeline b/w offshore & onshoreteams. Track changes (Minute level). Different people from the sameteam, as well as different teams, can store code simultaneously(Save all changes separately) "
    ]
  },
  {
    "q": "2.",
    "rep": [
      "1",
      ". Available Source Code Management tools in the market? ",
      "There are so many Source Code Management tools available in themarket. Those are . Git. SVN. Perforce. Clear case Out ofall these tools, Git is the most advanced tool in the market where weare getting so many advantages compared to other Source CodeManagement tools. "
    ]
  },
  {
    "q": "3. What is Git? ",
    "rep": [
      "Git is one of the Source Code Management tools where we can store anytype of code. Git is the most advanced tool in the market now.We also call Git is version control system because every updatestored as a new version. At any point of time, we can get anyprevious version. We can go back to previous versions. Everyversion will have a unique number. That number we call commit-ID. Byusing this commit ID, we can track each change i.e. who did whatat what time. For every version, it takes ",
      "incremental backup instead of taking the whole backup. Thats why Gitoccupies less space. Since it ",
      "is occupying less space, it is very fast. "
    ]
  },
  {
    "q": "4. What are the advantages of Git? . Speed: - ",
    "rep": [
      "Git stores every update in the form of versions. For every version,it takes incremental backup instead of taking the whole backup.Since it is taking less space, Git is very fast. That ",
      "incremental backup we call Snapshot ",

      ". Parallel branching: - ",
      "We can create any number of branches as per our requirement. No needto take prior permission from any one, unlike other Source CodeManagement tools. Branching is for parallel development. Gitbranches allow us to work simultaneously on multiple features.",
      ". Fully Distributed: - ",
      "A backup copy is availa",
      "ble in multiple locations in each and everyones server ",
      "instead of keeping in one central location, unlike other Source CodeManagement tools. So even if ",
      "we lose data from one server, we can recover it easily. Thats why wecall GIT as DVCS (Distributed ",
      "Version Control System) "
    ]
  },
  {
    "q": "5. What are the stages in Git? ",
    "rep": [
      "There are total of 4 stages in Git ",
      "1. Workspace: - ",
      "It is the place where we can create files physically and modify.Being a Git user, we work in this work space. ",
      "2. Staging area/Indexing area: - ",
      "In this area, Git takes a snapshot for every version. It is a bufferzone ",
      "between workspace and local repository. We cant see this regionbecause it is virtual. "
    ]
  },
  {
    "q": "3. Local repository: - ",
    "rep": [
      "It is the place where Git stores all commit locally. It is a hiddendirectory so that no one can delete it accidentally. Everycommit will have unique commit ID. ",
      "4. Central repository",
      ": - It is the place where Git stores all commit centrally. It belongsto everyone who is working in your project. Git Hub is one ofthe central repositories. Used for storing the code and sharingthe code to others in the team. "
    ]
  },
  {
    "q": "6. What is the common branching strategy in Git? ",
    "rep": [
      " Product is the same, so one repo. But different features. ",

      " Each feature has one separate branch ",

      " Finally, merge (code) all branches ",

      " For Parallel development ",

      " Can create any no of branches ",

      " Can create one branch on the basis of another branch ",

      " Changes are personal to that particular branch ",

      " Can put files only in branches (not in repo directly) ",

      " The default branch is Master ",

      " Files created in a workspace will be visible in any of th",
      "e branch workspaces until you commit. Once you commit, thenthat file belongs to that particular branch. "
    ]
  },
  {
    "q": "7. How many types of repositories available in Git? ",
    "rep": [
      "There are two types of repositories available in Git ",
      "Bare Repositories (Central) ",
      "These repositories are only for Storing & Sharing the code Allcentral repositories are bare repositories ",
      "Non ",

      "Bare Repositories (Local) ",
      "In these repositories, we can modify the files All local /userrepositories are Bare Repositories "
    ]
  },
  {
    "q": "8. Can you elaborate commit in Git? ",
    "rep": [
      " Storing file permanently in the local repository we call commit. ",

      " For every commit, we get one commit ID ",

      " It contains 40 long Alpha",
      "-numeric characters ",
      " It uses the concept Check some (Its a tool in Linux, generatesbinary value equal to the data ",
      "present in file) ",
      " Even if you change one dot, Commit",
      "-ID will get changed ",
      " Helps in tracking the changes"
    ]
  },
  {
    "q": "9. What do you mean by Snapshot in Git? ",
    "rep": [
      " It is a backup copy for each version g",
      "it stores in a repository. ",
      " Snapshot is an incremental backup copy (only backup for newchanges) ",

      " Snapshot represents some data of particular time so that, we canget data of particular time by ",
      "taking that particular snapshot ",
      " This snapshot will be t",
      "aken in Staging area in Git which is present between Git workspaceand Git local repository. "
    ]
  },
  {
    "q": "10. What is GitHub? ",
    "rep": [
      "Git hub is central git repository where we can store code centrally.Git hub belongs to Microsoft Company. We can create any numberof repositories in Git hub. All public repositories are free andcan be accessible by everyone. Private repositories are not freeand can restrict public access for "
    ]
  },
  {
    "q": "11. What is Git merge? ",
    "rep": [
      "By default, we get one branch in git local repository calledMaster. We can create any no of ",
      "branches for parallel development. We write code for each feature ineach branch so that development happens separately. Finally, wemerge code off all branches in to Master and push to centralrepository. We can merge code to any other branch as well. But mergingcode into master is standard practice that being followedwidely. Sometimes, while merging, conflict occurs. When samefile is in different branches with different code, when try tomerge those branches, conflict occurs. We need to resolve thatconflict manually by rearranging the code. "
    ]
  },
  {
    "q": "12. What is Git stash? ",
    "rep": [
      "We create multiple branches to work simultaneously on multiplefeatures. But to work on multiple tasks simultaneously in onebranch (i.e. on one feature), we use git stash. Stash is a temporaryrepository where we can store our content and bring it backwhenever we want to continue with our work with that storedcontent. It removes content inside file from working directory andputs in stashing store and gives clean working directory so thatwe can start new work freshly. Later on you can bring back thatstashed items to working directory and can resume your work on thatfile. Git stash applicable to modified files. Not new files.Once we finish our work, we can remove all stashed items formstash repository. "
    ]
  },
  {
    "q": "13. What is Git Reset? ",
    "rep": [
      "Git Reset command is used to remove changes form staging area. Thisis bringing back file form staging area to work directory. Weuse this command before commit. Often we go with git addaccidentally. In this case if we commit, that file will becommitted. Once you commit, commit ID will be generated and itwill be in the knowledge of everyone. So to avoid this one, we use Gitreset. If ",
      "you add hard flag to git reset command, in one go, file will beremoved from staging area as well ",
      "as working directory. We generally go with this one if we fell thatsomething wrong in the file itself. "
    ]
  },
  {
    "q": "15. What is Git Revert? ",
    "rep": [
      "Git Revert command is used to remove changes from all 3 stages (workdirectory, staging area and local repository). We use thiscommand after commit. Sometimes, we commit accidentally and later",
      "on we realize that we shouldnt have done that. For this we use Gitreve",
      "rt. This operation will generate new commit ID with somemeaningful message to ignore previous commit where mistake",
      "is there. But, here we cant completely eliminate the commit wheremistake is there. Because Git ",
      "tracks each and every change. "
    ]
  },
  {
    "q": "16. Difference between Git pull and Git clone? ",
    "rep": [
      "We use these two commands to get changes from central repository. Forthe first time if you want whole central repository in yourlocal server, we use git clone. It brings entire repository to yourlocal server. Next time onwards you might want only changesinstead of whole repository. In this case, we use Git pull. Gitclone is to get whole copy of central repository Git pull is to getonly new changes from central repository (Incremental data) "
    ]
  },
  {
    "q": "17. What is the difference between Git pull and Fetch? ",
    "rep": [
      "We use Git pull command to get changes from central repository. Inthis operation, internally two commands will get executed. Oneis Git fetch and another one is Git merge. Git fetch means, onlybringing changes from central repo to local repo. But thesechanges will not be integrated to local repo which is there inyour server. Git merge means, merging changes to your local repositorywhich is there in your server. Then only you can see thesechanges. So Git pull is the combination of Git pull and Gitmerge. "
    ]
  },
  {
    "q": "18. What is the difference between Git merge and rebase? ",
    "rep": [
      "We often use these commands to merge code in multiple branches. Bothare almost same but few differences. When you run Git merge, onenew merge commit will be generated which is having the historyof both development branches. It preserves the history of bothbranches. By seeing this merge commit, everyone will come toknow that we merged two branches. If you do Git rebase, commits innew branch will be applied on top of base branch tip. Therewo",
      "nt be any merge commit here. It ",
      "appears that you started working in one single branch form thebeginning. This operation will not preserve the history of newbranch. "
    ]
  },
  {
    "q": "19. What is Git Bisect? ",
    "rep": [
      "Git Bisect we use to pick bad commit out of all good commits. Oftendevelopers do some mistakes. For them it is very difficult topick that commit where mistake is there. They go with building allcommits one by one to pick bad commit. But Git bisect made theirlives easy. Git bisect divides all commits equally in to twoparts (bisecting equally). Now instead of building each commit, theygo with building both parts. Where ever bad commit is there,that part build will be failed. We do operation many times tillwe get bad commit. So Git bisect allows you to find a bad commit outof ",
      "good commits. You dont have to trace down the bad commit by hand;git",
      "-bisect will do that for you. "
    ]
  },
  {
    "q": "20. What is Git squash? ",
    "rep": [
      "To move multiple commits into its parent so that you end up with onecommit. If you repeat this process multiple ti",
      "mes, you can reduce n number of commits to a single one. Finally wewill end up ",
      "with only one parent commit. We use this operation just to reducenumber of commits. "
    ]
  },
  {
    "q": "21. What is Git hooks? ",
    "rep": [
      "We often call this as web hooks as well. By default we get someconfiguration files when you install git. These files we use toset some permissions and notification purpose. We have different typesof hooks (pre commit hooks & post commit hooks) ",
      "Pre-commit hooks:-",
      "Sometimes you would want every member in your team to follow certainpattern while giving commit message. Then only it should allowthem to commit. These type of restrictions we call pre-commithooks. ",
      "Post-commit hooks:-",
      "Sometimes, being a manager you would want an email notificationregarding every commit occurs in a central repository. This kindof things we call post-commit hooks. In simple terms, hooks arenothing but scripts to put some restrictions. "
    ]
  },
  {
    "q": "22. What is Git cherry-pick? ",
    "rep": [
      "When you go with git merge, all commits which are there in newdevelopment branch will be merged into current branch where youare. But sometimes, requirement will be in such that you would wantto get only one commit form development branch instead ofmerging all commits. In this case we go with git cherry-pick.Git cherry-pick will pick only one commit whatever you select andmerges with "
    ]
  },
  {
    "q": "23. What is the difference between Git and SVN? SVN:- ",
    "rep": [
      "It is centralized version control system (CVCS) where back up copywill be placed in only one ",
      "central repository. There is no branching strategy in SVN. You cantcreate branches. So no parallel development. There is no localrepository. So cant save ",
      "anything locally. Every time after writing code you need topush that code to central repository immediately to save changes.",
      "Git:- ",
      "It is a Distributed version control system where back up copy isavailable in everyones machines ",
      "local repository as well as a central repository. We can create anyno of branches as we want. So we can go in parallel developmentsimultaneously. Every Git repository will have its own localrepository. So we can save changes locally. At the end of ourwork finally, we can push code to a central repository. "
    ]
  },
  {
    "q": "24. What is the commit message in Git? ",
    "rep": [
      "Every time we commit, while committing, we have to give commitmessage just to identify each ",
      "commit. We cant remember to commit numbers because they contain 40long alphanumeric ",
      "characters. So, to remember commits easily, we give commit message.The format of commit message differs from company to company andindividual to individual. We have one more way to ",
      "identify commits. That is giving Tags. Tag is a kind of meaningfulname to a particular commit. ",
      "Instead of referring to commit ID, we can refer to tags. Internallytag will refer to respective commit ID. These are the ways toget a particular commit easily. "
    ]
  },
  {
    "q": "26. What is Configuration Management? ",
    "rep": [
      "It is a method through we automate admin tasks. Each and every minutedetails of a system, we call configuration details. If we do anychange here means we are changing the configuration of amachine. That means we are managing the configuration of themachine. System administrators used to manage the configurationof machine through manually. DevOps engineers are managing thisconfiguration through automated way by usi",
      "ng some tools which are available in the market. Thats ",
      "why we call these tools as configuration management tools. "
    ]
  },
  {
    "q": "27. What is IAC? ",
    "rep": [
      "IAC means Infrastructure As Code. It is the process through which weautomate all admin tasks. Here we write code in Ruby script inchef. When you apply this code, automatically code will be convertedinto Infrastructure. So here we are getting so many advantagesin writing the code. Those are 1. Code is Testable (Testing codeis easy compare to Infrastructure) 2. Code is Repeatable (Can re-usethe same code again and again) 3. Code is Versionable (Canstore in versions so that can get any previous versions at any time)"
    ]
  },
  {
    "q": "28. What do you mean by IT Infrastructure?? ",
    "rep": [
      "IT Infrastructure is a composite of the following things ",
      " Software ",

      " Network ",

      " People ",

      " Process"
    ]
  },
  {
    "q": "29. What are the problems that system admins used to face earlierwhen there were no configuration management tools? ",
    "rep": [
      "1. Managing users & Groups is big hectic thing (create users andgroups, delete, edit) 2. Deal",
      "ing with packages (Installing, Upgrading & Uninstalling) 3.Taking backups on regular basis manually 4. Deploying all kindsof applications in servers 5. Configure services (Starting, stoppingand restarting services) These are some problems that systemadministrators used to face earlier in their manual process ofmanaging configuration of any machine. "
    ]
  },
  {
    "q": "30. Why should we go with Configuration Management Tool? ",
    "rep": [
      "1. By using the Configuration Management Tool, we can automate almosteach and every admin task. 2. We can increase uptime so that canprovide maximum user satisfaction. 3. Improve the performance ofsystems. 4. Ensure compliance ",
      "5. Prevent errors as tools wont do any errors 6. ",
      "Reduce cost (Buy tool once and use 24/7) "
    ]
  },
  {
    "q": "31. How this Configuration Management Tool works? ",
    "rep": [
      "Whatever system admins (Linux/windows) used to do manually, now weare automating all those tasks by using any ConfigurationManagement Tool. We can use this tool whether your servers are inon-premises or in the cloud. It turns your code intoinfrastructure. So your code is versionable, repeatable andtestable. You only need to tell what the desired configuration shouldbe, not how to achieve it. Through automation, we get ourdesired state of server. This is unique feature of ConfigurationManagement Tool. "
    ]
  },
  {
    "q": "32. What is the architecture of Chef? ",
    "rep": [
      "Chef is an administration tool. In this we have total 3 stages. 1.Chef Workstation (It is the place where we write code) 2. ChefServer (It is the place where we store code) 3. Chef Node (It is theplace where we apply code) We need to establish communicationamong workstation, server and nodes. You can have any no ofnodes. There is no limit. Chef can manage any no of nodes effectively."
    ]
  },
  {
    "q": "33. Components of Chef? Chef Workstation: ",
    "rep": [
      "Where you write the code ",
      "Chef Server: ",
      "Where you upload the code ",
      "Chef Node: ",
      "Where you apply the code ",
      "Knife: ",
      "Tool to establish communication among workstation, server & node.",
      "Chef-client: ",
      "Tool runs on every chef node to pull code from chef server",
      "Ohai: ",
      "Maintains current state information of chef node (System DiscoveryTool) ",
      "Idempotency",
      ": Tracking the state of system resources to ensure that the changesshould not re-apply repeatedly. ",
      "Chef Supermarket: ",
      "Where you get custom code "
    ]
  },
  {
    "q": "34. How does Chef Works? ",
    "rep": [
      "We need to install chef package in workstation, server and nodes. Wecreate cookbook in workstation. Inside cookbook, there will be adefault recipe where you write code in ruby script. You cancreate any no of recipes. There is no limit. After writing code inrecipe, we upload whole cookbook ",
      "to chef server. Chef server acts as central hub storing code. Then,we need to add this cookbooks ",
      "recipe to nodes run-list. Chef-client tool will be there in each andevery chef node. It runs frequently. Chef-client comes to chefserver and take that code and applies that code in node. This is howcode will be converted into infrastructure. "
    ]
  },
  {
    "q": "35. What is Idempotency? ",
    "rep": [
      "It is unique feature in all configuration management tools. Itensures that changes should not re- apply repeatedly. Oncechef-client converted code into Infrastructure, then even chef-clientruns ",
      "again, it will not take any action. It wont do the same task againand again. If any new changes are ",
      "there in that code, then only chef-client is going to take ac",
      "tion. So it doesnt make any difference ever ",
      "if you run chef-client any no of times. So tracking the systemdetails to not to reapply changes again and again, we callIdempotency. "
    ]
  },
  {
    "q": "36. What is Ohai and how does it works?? ",
    "rep": [
      "Ohai we call System Discovery Tool. It stores system information.It captures each and every minute ",
      "details of system and updates it then and there if any new changesare there. Whenever chef-client converts code in infrastructurein node, immediately Ohai store will be updated. Next time onwards,before chef-client runs, it verifies in Ohai store to know aboutcurrent state of information. So chef- client will come to knowthe current state of server. Then chef-client acts accordingly. If newchanges are there, then only it will take act",
      "ion. If there are no new changes, then it wont take any action.",
      "Ohai tool helps in achieving this. "
    ]
  },
  {
    "q": "37. How many types of chef server? ",
    "rep": [
      "Total there are 3 ways through which we can manage chef server. 1.Directly we can take chef server from Chef Company itself. Inthis case, everything will be managed by Chef Company. You will getsupport from chef. This type of server we call Managed/Hostedchef. This is completely Graphical ",
      "User Interface (GUI). Its not free. We need to pay to Chef Companyafter exceedi",
      "ng free tier limit. 2. We can launch one server and we need toinstall chef server package. It is completely free package.",
      "Its GUI. 3. We can launch one server and we need to install chefserver package. It is completely free package. Its CLI (CommandLi",
      "ne Interface). "
    ]
  },
  {
    "q": "38. What is there inside cookbook?? ",
    "rep": [
      "Below mentioned files and folders will be there inside cookbook whenyou first create it Chefignore: like .gitignore (to ignore filesand folders) Kitchen.yml: for testing of cookbookMetadata.rb: name, ",
      "author, version. etc of cookbook Readme.md: information about usageof ",
      "cookbook Recipe: It is a file where you write code ",
      "Spec: ",
      "for unit test ",
      "Test: ",
      "for integration test "
    ]
  },
  {
    "q": "39. What is Attributes concept in chef? ",
    "rep": [
      "Sometimes we might need to deploy web applications to in nodes andfor that we need to know ",
      "some host specific details of each server like IP Address, Host name.. etc. Because we need to ",
      "mention that in configuration files of each server. These files wecall as Configuration files. This information will be vary fromsystem to system. These host specific details that we mention in",
      "Configuration files,we call Attributes. Chef",
      "-client tool gathers these Attributes from Ohai store and putsin configuration files. Instead of hard coding these attributes, wemention as variables so that every time, file will be updatedwith latest details of their respective nodes. "
    ]
  },
  {
    "q": "40. What is Run-list in Chef? ",
    "rep": [
      "This is an ordered list of recipes that we are going to apply tonodes. We mention all recipes in cookbook and then we uploadthat cookbook to chef server. Then, we attach all recipes to nodesrun- list in sequence order. When chef-client runs, it appliesall recipes to nodes in the same order "
    ]
  },
  {
    "q": "41. What is bootstrap? ",
    "rep": [
      "It is the process of adding chef node to chef server or we can call,bringing any machine into chef environment. In thisbootstrapping process total three action will be performedautomatically. 1. Node gets connected to chef server. 2. Chefserver will install chef package in chef node. 3. Cookbooks willbe applied to chef node. It is only one time effort. As and whenwe purchase any new machine in company, immediately we ",
      "add that server to chef server. At a time, we can bootstrap onemachine. We cant bootstrap multiple ",
      "machines at a time. "
    ]
  },
  {
    "q": "42. What is the workflow of Chef? ",
    "rep": [
      "We connect chef workstation, chef server and chef node with eachother. After that, we create cookbook in chef workstation andinside that cookbook, we write code in recipe w.r.t. theinfrastructure to be created. Then we upload entire cookbook tochef server and attach that ",
      "cookbooks recipe to nodes run",
      "-list. Now we automate chef-client which will be there in all chefnodes. Chef-client runs frequently towards chef server for newcode. So chef-client will get that code from server and finallyapplies to chef node. This is how, code is converted intoinfrastructure. If no changes are there in code, even ifchef-",
      "client runs any no of time, it wont take any action until it",
      "finds some changes in code. This is what we call Idempotency. "
    ]
  },
  {
    "q": "43. How does we connect Chef Workstation to Chef Server? ",
    "rep": [
      "First we download started kit from chef server. This will bedownloaded in the form of zip file. If we extract this zip file,we will get chef-repo folder. This chef-repo folder we need to placein chef workstation. Inside chef-repo folder, we can see totalthree folders. They are .chef, cookbooks and roles. Out of thesethree, .chef folder is responsible to establish communication betweenchef server and chef workstation. Because, inside .chef folder,we can see two files. They are knife.rb and organization.pem.Inside kinfe.rb, there will be the url (address) of chef server.Because of this url, communication will be established betweenchef server and chef workstation. This is how we connect ChefWorkstation to Chef Server. "
    ]
  },
  {
    "q": "44. How does the chef-client runs automatically? ",
    "rep": [
      "By default, chef-client runs manually. So ",
      "we need to automate this manually. For this, we use cron toolwhich is the default tool in all Linux machines use to schedule tasksto be executed automatically at frequent intervals. So in thiscrontab file, we give chef",
      "-client command and we need to set the timing as per ourrequirement. Then onwards chef-client runs automatically after everyfrequent intervals. It is only one time effort. When we purchaseany new server in company, along with bootstrap, we automatechef-client then and there. "
    ]
  },
  {
    "q": "45. What is chef supermarket? ",
    "rep": [
      "Chef supermarket is the place where we get custom cookbooks. Everytime we need not to create cookbooks and need not to write codefrom scratch. We can go with custom cookbooks which areavailable in chef supermarket being provided by cheforganization and community. We can download these cookbooks andmodify as per our needs. We get almost each and every cookbook fromchef supermarket. They are safe to use. "
    ]
  },
  {
    "q": "46. What is wrapper cookbook? ",
    "rep": [
      "Either we can download those chef supermarket cookbooks or withoutdownloading, we can call these supermarket cookbooks during runtime so that every time we get updates automatically for thatcookbook if any new updates are there. Here, we use our own cookbookto call chef supermarket cookbook. This process of callingcookbook by using another cookbook, we call wrapper cookbook.Especially, we use this concept to automate chef-client. "
    ]
  },
  {
    "q": "47. What is roles in chef? ",
    "rep": [
      "Roles are nothing but a Custom run-list. We create role & uploadto chef server & assign them to nodes. If we have so manynodes, need to add cookbook to run-list of all those nodes, it is verydifficult to attach to all nodes run-list. So, we create role& attach that role to all those nodes once. Next timeonwards, add cookbook to that role. Automatically, that cookbook willbe attached to all ",
      "those nodes. So role is one time effort. Instead of adding cookbooksto each & every nodes run",
      "-list always, just create a role & attach that role tonodes. When we add cookbook to that role, it will beautomatically applied to all nodes those assigned with thatrole. "
    ]
  },
  {
    "q": "48. What is include_recipe in chef? ",
    "rep": [
      "By default, we can call one recipe at a time in one cookbook. But ifyou want to call multiple recipes from same cookbook, we useinclude_recipe concept. Here, we take default recipe and we mentionall recipes to be called in this default recipe in an order. Ifwe call default recipe, automatically default recipe will callall other recipes which are there inside default recipe. By using onerecipe, we can call any no of recipes. This process of callingone recipe by using other recipe, we call as include_recipe.Here condition is we can call recipes from same cookbook, butnot from different cookbooks. ",
      "49. How to deploy a web server by using chef? ",
      "package httpd do action :install end ",

      "file /var/www/html/index.html do content Hello Dear Students!!action :create end ",

      "service httpd do action [ :enable, :start ] end ",

      "50. How to write ruby code to create file, directory? ",
      "file /myfile do content This is my second file action :createowner root group root end ",

      "directory /mydir do action :create owner root group root end ",

      "51. How to write ruby code to create user, group and install package?",
      "user user1 do action: create end ",

      "group group1 do action :create members user1 append true end ",

      "package httpd do action: install end "
    ]
  },
  {
    "q": "52. What is container? ",
    "rep": [
      "The container is like a virtual machine in which we can deploy anytype of applications, soft wares ",
      "and libraries. Its a light weight virtual machine which uses OS inthe form of image, which is having ",
      "less in size compare to traditional VMware and oracle virtual box OSimages. Container word has been taken from shipping containers.It has everything to run an application. ",
      "53. What is virtualization? ",
      "Logically dividing big machine into multiple virtual machines so thateach virtual machine acts as new server and we can deploy anykind of applications in it. For this first we install anyvirtualization software on top of base OS. This virtualizationsoftware will divide base machine resources in to logicalcomponents. In a simple terms, logically dividing one machine intomultiple machines we call virtualization. ",
      "54. What is Docker? ",
      "Docker is a tool by using which, we create containers in less time.Docker uses light weight OS in the form of docker images that wewill get from docker hub. Docker is open source now. It became so",
      "popular because of its unique virtualization concept calledContainerization which is not there in ",
      "other tools. We can use docker in both windows and Linux machines."
    ]
  },
  {
    "q": "55. What do you mean by docker image? ",
    "rep": [
      "Docker image is light weight OS provided by docker company. We canget any type of docker image form docker hub. We use thesedocker images to create docker containers. This docker images maycontain only OS or OS + other soft wares as well. Each softwarein docker image, will be stored in the form of layer. Advantageof using docker images is, we can replicate the same environment anyno of times. ",
      "56. What are the ways through which we can create docker images?",
      "There are three ways through which we can create docker images. 1. Wecan take any type of docker image directly from docker hub beingprovided by docker company and docker community. 2. We cancreate our own docker images form our own docker containers. I.e.first we create container form base docker image taken formdocker hub and then by going inside container, we install allrequired soft wares and then create docker image from our owndocker container. 3. We can create docker image form dockerfile. It is the most preferred way of creating docker images.",
      "57. What is docker file and why do we use it? ",
      "It is a just normal text file with instructions in it to build dockerimage. It is the automated way of creating docker images. Onceyou build docker image, automatically docker file will be created. Inthis file, we mention required OS image and all required softwares in the form of instructions. Once we build docker file,back end, docker container will be created and then docker image willbe crated from that container and that container will bedestroyed automatically. "
    ]
  },
  {
    "q": "58. Difference between docker and VM Ware? ",
    "rep": [
      "VM Ware uses complete OS which contains GBs in size. But docker imagesize is MBs only. So it takes ",
      "less size. Thats why it takes less base machine resources. Thisdocker image is compressed version ",
      "of OS. The second advantage of docker is, there is no pre-allocationof RAM. During run time, it takes RAM as pre-requirement ",
      "from base machine and ones job is done, it ",
      "releases RAM. But in VM Ware, pre-allocation of RAM is thereand it blocked whether it uses or not. So, need more RAM for basemachine if you want to use VM Ware unlike Docker. ",
      "59. What is OS-Lever Virtualization? ",
      "It is the unique feature of Docker which is not available in othervirtualization soft wares. Docker takes most of UNIX featuresform host machine OS and it only takes extra layers of required OS inthe form of docker image. So docker image contains only extralayers of required OS. For core UNIX kernel, it depends uponhost OS, why because UNIX kernel is same in any of the UNIX and Linuxflavours. In a simple term, docker t",
      "akes host OS virtually. Thats why we call this concept as OS",
      "-Lever Virtualization. ",
      "60. What is Layered file system/Union file system? ",
      "Inside docker container, wheat ever we do, that forms as a new layer.For instance, creating files, directories, installing packagesetc. This is what we call as layered file system. Each layer takesless space. We can create docker image form this container. Inthat docker image also we get all these ",
      "layers and forms unity. Thats why we also call Union File System. Ifwe",
      "create container out of docker image, you can able to see allthose files, directories and packages. This is what replication ofsame environment. "
    ]
  },
  {
    "q": "61. What are the benefits of Docker? ",
    "rep": [
      " Containerization (OS level virtualization) (No need guest OS) ",

      " No pre",
      "-allocation of RAM ",
      " Can replicate same envi",
      "ronment ",
      " Less cost ",

      " Less weight (MBs in size) ",

      " Fast to fire up ",

      " Can run on physical/virtual/cloud ",

      " Can re",
      "-use (same image) ",
      " Can create containers in less time"
    ]
  },
  {
    "q": "62. List of Docker components? ",
    "rep": [
      "Docker image: ",

      "Contains OS (very small) (almost negligible) + soft wares ",
      "Docker Container: ",

      "Container like a machine which is created from Docker image.",
      "Docker file: ",

      "Describes steps to create a docker image. ",
      "Docker hub/registry: ",

      "Stores all docker images publicly. ",
      "Docker daemon: ",

      "Docker service runs at back end Above five components we call asDocker components "
    ]
  },
  {
    "q": "63. What is Docker workflow? ",
    "rep": [
      "First we create Docker file by mentioning instructions to builddocker image. Form this Docker image, we are going to createDocker container. This Docker image we can push to docker hub as well.This image can be pulled by others to create docker containers.We can create docker images from docker containers. Like this wecan create Docker images form either docker file or docker containers.We can create docker containers from docker images. This is thework flow of docker. "
    ]
  },
  {
    "q": "64. Sample Docker file instructions? ",
    "rep": [
      "FROM ubuntu WORKDIR /tmp RUN echo Hello > /tmp/testfile ENVmyname user1 COPY testfile1 ",
      "/tmp ADD test.tar.gz /tmp "
    ]
  },
  {
    "q": "65. What is the importance of volumes in Docker",
    "rep": [
      "? ",
      " Volume is a directory inside your container ",

      " First declare directory as a volume and then share volume ",

      " Even if we stop container, still we can access volume ",

      " Volume will be created in one container ",

      " You can share one volume across any no of containers ",

      " Volume will not be included when you ",
      "update an image ",
      " Map volumes in two ways ",

      " Share host ",
      "container ",
      " Share container ",
      "container "
    ]
  },
  {
    "q": "66. What do you mean by port mapping in Docker? ",
    "rep": [
      "Suppose if you want to make any container as web server by installingweb package in it, you need to provide containers IP address topublic in order to access website which is running inside dockercontainer. But Docker cont",
      "ainers dont have an IP address. So, to address this issue, we have a",
      "concept called ",
      "Docker port mapping.",
      "We map host port with container port and customers use public IP ofhost ",
      "machine. Then their request will be routed from host port tocontainers por",
      "t and will be loaded web page which is running inside dockercontainer. This is how we can access website which is runninginside container through port mapping. "
    ]
  },
  {
    "q": "67. What is Registry server in Docker? ",
    "rep": [
      "Registry server is our own docker hub created to store private dockerimages instead of storing in public Docker hub. Registry serveris one of the docker containers. We create this Registry server",
      "from registry image, especially provided by docker to createprivate docker hub. We can store any ",
      "no of private docker images in this Registry server. We can giveaccess to others, so that, they also can store their dockerimages whomever you provide access. Whenever we want, we can pullthese images and can create containers out of these images. "
    ]
  },
  {
    "q": "68. Important docker commands? ",
    "rep": [
      "1. Docker ps (to see list of running containers) 2. Docker ps-a (to see list of all containers) 3. Docker images (to see listof all images) 4. Docker run (to create docker container)5. Docker attach (to go inside container) 6. Docker stop(to stop container) 7. Docker start (to start container)8. Docker commit (to create image out of docker file) 9.Docker rm (to delete container) 10. Docker rmi (to delete image)"
    ]
  },
  {
    "q": "69. What is Ansible? ",
    "rep": [
      "Ansible is one of the configuration Management Tools. It is a methodthrough we automate system admin tasks. Configuration refers toeach and every minute details of a system. If we do any changesin system means we are changing the configuration of a machine.That means we are changing the configuration of the machine. Allwindows/Linux system administrators manage the configuration ofa machine manually. All DevOps engineers are managing thisconfiguration automatic way by using ",
      "some tools which are available in the market. One such tool isAnsible. That",
      "s why we call Ansible as configuration management tool. "
    ]
  },
  {
    "q": "70. Working process of Ansible? ",
    "rep": [
      "Here we crate file called playbook and inside playbook we writescript in YAML format to create infrastructure. Once we executethis playbook, automatically code will be converted intoInfrastructure. We call this process as IAC (Infrastructure asCode). We have open source and enterprise editions of Ansible.Enterprise edition we call Ansible Tower. "
    ]
  },
  {
    "q": "71. The architecture of Ansible? ",
    "rep": [
      "We create Ansible server by installing Ansible package in it. Pythonis pre-requisite to install ansible. We need not to installansible package in nodes. Because, communication establishes fromserver to ",
      "node through ssh client. By default all Linux machine will havessh client. Serve",
      "r is going to push the code to nodes that we write inplaybooks. So Ansible follows pushing mechanism. 72. Ansiblecomponents? ",
      "Server: ",

      "It is the place where we create playbooks and write code in YMLformat ",
      "Node: ",

      "It is the place where we apply code to create infrastructure. Serverpushes code to nodes. ",
      "Ssh: ",

      "It is an agent through ansible server pushes code to nodes.",
      "Setup: ",

      "It is a module in ansible which gathers nodes information.",
      "Inventory file:- ",
      "In this file we keep IP/DNS of nodes. "
    ]
  },
  {
    "q": "73. Disadvantages in other SCM (Source Code Management) tools?",
    "rep": [
      " Huge overhead of Infrastructure setup ",

      " Complicated setup ",

      " Pull mechanism ",

      " Lot of learning required"
    ]
  },
  {
    "q": "74. Advantages of Ansible over other SCM (Source Code Management)tools? ",
    "rep": [
      " Agentless ",

      " Relies on ssh ",

      " Uses pyth",
      "on ",
      " Push mechanism"
    ]
  },
  {
    "q": "75. How does Ansible work? ",
    "rep": [
      "We give nodes IP addresses in hosts file by creating any group inansible server why because, ansible ",
      "doesnt recognize individual IP addresses of nodes. We createplaybook and write code in YAML ",
      "script. The group name we have to mention in a playbook and then weexecute the playbook. By default, playbook will be executed inall those nodes which are under this group. This is how ansibleconverts code into infrastructure. "
    ]
  },
  {
    "q": "76. What do you mean by Ad-Hoc commands in Ansible? ",
    "rep": [
      "These are simple one liner Linux commands we use to meet temporaryrequirements without actually ",
      "saving for later. Here we dont use ansible modules. So there,Idempotency will not work with Ad",
      "- ",
      "Hoc commands. If at all we dont get required YAML module to write tocreate infrastructure, t",
      "hen we go for it. Without using playbooks, we can use theseAd-Hoc commands for temporary purpose. "
    ]
  },
  {
    "q": "77. Differences between Chef and Ansible? ",
    "rep": [
      " Ansible chef ",

      " Playbook ",
      "Recipe ",
      " Module ",
      "Resource ",
      " Host ",
      " Node ",
      " Setup ",
      " Ohai ",
      " Ssh ",
      " Knife ",
      " Push",
      "-Pull "
    ]
  },
  {
    "q": "78. What is Playbook in Ansible? ",
    "rep": [
      "Playbook is a file where we write YAML script to createinfrastructure in nodes. Here, we use modules to createinfrastructure. We create so many sections in playbook. We mention allmodules in task section. You can create any no of playbooks.There is no limit. Each playbook defines one scenario. ",
      "All sections begin with ",
      "-",
      " & its attributes & parameters beneath it. "
    ]
  },
  {
    "q": "79. Mention some list of sections that we mention in Playbook?",
    "rep": [
      "1. Target section 2. Task section 3. Variable section 4. Handlersection "
    ]
  },
  {
    "q": "80. What is Target section in Ansible playbook? ",
    "rep": [
      "This is one of the important sections in Playbook. In this section,we mention the group name which contains either IP addresses orHostnames of nodes. When we execute playbook, then code will be",
      "pushed too all nodes which are there in the group that we mention inTarget section. We use all ",
      "key word to refer all groups. "
    ]
  },
  {
    "q": "81. What is Task section in Ansible playbook? ",
    "rep": [
      "This is second most important section in playbook after targetsection. In this section, we are going to mention list of allmodules. All tasks we mention in this task section. We can mention anyno of modules in one playbook. There is no limit. If there isonly one task, then instead of going with big playbook, simplywe can go with arbitrary command where we can use one module at atime. If more than one module, then there is no option exceptgoing with big playbook. "
    ]
  },
  {
    "q": "82. What is Variable section? ",
    "rep": [
      "In this section we are going to mention variables. Instead of hardcoding, we can mention as variables so that during runtime itpulls the actual value in place of key. We have this concept in eachand every ",
      "programming language and scripting language. We use vars key wordto use variables. "
    ]
  },
  {
    "q": "83. What is Handler section? ",
    "rep": [
      "All tasks we mention in tasks section. But some tasks wheredependency is there, we should not mention in tasks section.That is not good practice. For example, installing package is one taskand starting service is one more task. But there is dependencybetween them. I.e. after installing package only, we have tostart service. Otherwise it throws error. These kind of tasks, wemention in handler "
    ]
  },
  {
    "q": "84. What is Dry run in playbook? ",
    "rep": [
      "Dry run is to test playbook. Before executing playbook in nodes, wecan test whether the code in ",
      "playbook is written properly or not. Dry run wont actually executesplaybook, but it shows output as ",
      "if it executed playbook. Then by seeing the output, we can come toknow whether the playbook is written properly or not. It checkswhether the playbook is formatted correctly or not. It tests how theplaybook is going to behave without running the tasks. "
    ]
  },
  {
    "q": "85. Why are we using loops concept in Ansible? ",
    "rep": [
      "Sometimes we might need to deal with multiple tasks. For instance,Installing multiple packages, Creating many users, creation manygroups. Etc. In this case, mentioning module for every task iscomplex process. So, to address this issue, we have a concept ofloops. We have to use variables in combination with loops. "
    ]
  },
  {
    "q": "86. Where do we use conditionals in Playbooks? ",
    "rep": [
      "Sometimes, your nodes could be mixture of different flavours of LinuxOS. Linux commands vary in ",
      "different Linux operating systems. In this case, we cant executecommon set of commands in all machines, at the same time, wecant execute different ",
      "commands in each node separately. To address this issue, wehave conditionals concept where commands will be executed based up oncertain condition that we give. "
    ]
  },
  {
    "q": "87. What is Ansible vault? ",
    "rep": [
      "Sometimes, we use sensitive information in playbooks likepasswor",
      "ds, keys etc. So any one can ",
      "open these playbooks and get to know about this sensitiveinformation. So we have to protect our playbooks from being readby others. So by using Ansible vault, we encrypt playbooks so that,those who ever is having password, only those can read thisinformation. It is the way of protecting playbooks by encryptingthem. "
    ]
  },
  {
    "q": "88. What do you mean by Roles in Ansible? ",
    "rep": [
      "Adding more & more functionality to the playbooks will make itdifficult to maintain in a single file. To address th",
      "is issue, we organize playbooks into a directory structure calledroles. We create ",
      "separate file to each section and we just mention the names of thosesections in playbook instead of mentioning all modules in mainplaybook. When you call main playbook, main playbook will call allsections files respectively in the order whatever order youmention in playbook. So, by using this Roles, we can maintainsmall playbook without any complexity. "
    ]
  },
  {
    "q": "89. Write a sample playbook to install any package? ",
    "rep": [
      "# My First YAML playbook ",

      "hosts: demo user: ansible become: yes connection: ssh tasks: ",

      "name: Install HTTPD on centos 7 action: yum name=httpdstate=installed "
    ]
  },
  {
    "q": "90. Write a sample playbook by mentioning variables instead of hardcoding? ",
    "rep": [
      "# My First YAML playbook ",

      "hosts: demo user: ansible become: yes connection: ssh vars: pkgname:httpd tasks: ",

      "name: Install HTTPD server on centos 7 action: yum name={{pkgname}}",
      "state=installed "
    ]
  },
  {
    "q": "91. What is CI & CD? ",
    "rep": [
      "CI means Continues Integration and CD means ContinuesDelivery/Deploy. Whenever developers write code, we integrateall that code of all developers at that point of time and we build,test and deliver/deploy to the client. This process we call CI& CD. Jenkins helps in achieving this. So instead of doingnight builds, build as and when commit occurs by integrating all codein SCM tool, build, test and checking the quality of that codeis what we call Continues Integration. "
    ]
  },
  {
    "q": "92. Key terminology that we use in Jenkins? Integrate: ",
    "rep": [
      "Combine all code written by developers till some point of time.",
      "Build: ",
      "Compile the code and make a small executable package. ",
      "Test: ",
      "Test in all environments whether application is working properly ornot. ",
      "Archived: ",
      "Stored in an antifactory so that in future we may use/deliver again.",
      "Deliver: ",
      "Handing the product to Client ",
      "Deploy: ",
      "Installing product in clients machines. "
    ]
  },
  {
    "q": "93. What is Jenkins Workflow? ",
    "rep": [
      "We attach Git, Maven, Selenium & Artifactory plug-ins to Jenkins.Once Developers put the code in Git, Jenkins pulls that code andsend to Maven for build. Once build is done, Jenkins pulls that builtcode and send to selenium for testing. Once testing is done,then Jenkins will pull that code and send to Artifactory as perrequirement and finally we can deliver the end product to client wecall Continues delivery. We can also deploy with Jenkins intoclients machine directly as per the requirement. This is whatJenkins work flow. "
    ]
  },
  {
    "q": "94. What are the ways through which we can do Continues Integration?",
    "rep": [
      "are total three ways through which we can do Continues Integration1. ",
      "Manually: ",

      "Manually write code, then do build manually and then test manually bywriting test cases and deploy manually into clients machine.2. ",
      "Scripts: ",

      "Can do above process by writing scripts so that these scripts doCI&CD automatically. But here complexity is, writing scriptis not so easy. 3. ",
      "Tool: ",

      "Using tools like Jenkins is very handy. Everything is preconfiguredin these type of tools. So less manual intervention. This is themost preferred way. "
    ]
  },
  {
    "q": "95. Benefits of CI? ",
    "rep": [
      "1. Detects bugs as soon as possible, so that bug will be rectifiedfast and development happens fast. 2. Complete automation. Noneed manual intervention. 3. We can intervene manually whenever wewant. I.e. we can stop any stage at any point of time so havebetter control. 4. Can establish complete and continues workflow. "
    ]
  },
  {
    "q": "96. Why only Jenkins? ",
    "rep": [
      " It has so many plug",
      "-ins. ",
      " You can write your own plug",
      "-in ",
      " You can use community plug",
      "-ins ",
      " Jenkins is not just a tool. It is a framework. I.e. you can do whatever you want. All you need is plug",
      "- ins. ",
      " We can attach slaves (nodes) to Jenkins master. It instructs others(slaves) to do Job. If slaves are ",
      "not available, ",
      " Jenkins itself does th",
      "e job. "
    ]
  },
  {
    "q": "97. What is Jenkins Architecture? ",
    "rep": [
      "Jenkins architecture is Client-Server model. Where ever, we installJenkins, we call that server is ",
      "Jenkins master.",
      "We can create slaves also in Jenkins, so that, server load will bedistributed to slaves. Jenkins master randomly assigns tasks toslaves. But if you want to restrict any job to run in particularslave, then we can do it so that, that particular job will beexecuted in that slave only. We can group ",
      "some slaves by using Label "
    ]
  },
  {
    "q": "98. How to install Jenkins? ",
    "rep": [
      " You c",
      "an install Jenkins in any OS. All OSs supports Jenkins. We accessJenkins through web page ",
      "only. Thats why it doesnt make any difference whether you installJenkins in Windows or Linux. ",

      " Choose Long Term Support release version, so that you will getsu",
      "pport from Jenkins community. If you are using Jenkins fortesting purpose, you can choose weekly release. But for productionenvironments, we prefer Long Term Support release version.",
      " Need to install JAVA. Java is pre",
      "-requisite to install Jenkins. ",
      " N",
      "eed to install web package. Because, we are going to access Jenkinsthrough web page only. "
    ]
  },
  {
    "q": "99. Does Jenkins open source? ",
    "rep": [
      "There are two editions in Jenkins 1. Open source 2. Enterpriseedition Open source edition we call Jenkins. Here we get supportfrom community if we need it. Enterprise edition we call Hudson. HereJenkins company will provide support. "
    ]
  },
  {
    "q": "100. How many types of configurations in Jenkins? ",
    "rep": [
      "There are total 3 types of configurations in Jenkins. 1. ",
      "Global: ",

      "Here, whatever configuration changes we do, applicable to wholeJenkins including jobs as well as nodes. This configuration hashigh priority. 2. ",
      "Job: ",

      "These configurations applicable to only Jobs. Jobs also we call asprojects or items in Jenkins. 3. ",
      "Node: ",

      "These configurations applicable to only nodes. Also we call Slaves.These are kind of helpers to Jenkins master to distribute theexcessive load. "
    ]
  },
  {
    "q": "101. What do you mean by workspace in Jenkins? ",
    "rep": [
      "The workspace is the location on your computer where Jenkins placesall files related to the Jenkins project. By default eachproject or job is assigned a workspace location and it containsJenkins-specific project metadata, temporary files like logs andany build artefacts, including transient build files. Jenkinsweb page acts like a window through which we are actually doing workin workspace. "
    ]
  },
  {
    "q": "102. List of Jenkins services? ",
    "rep": [
      " localhost:8080/restart (to restart Jenkins) ",

      " localhost:8080/stop (to stop Jenkins) ",

      " localhost:8080/start (to start Jenkins) "
    ]
  },
  {
    "q": "103. How to create a free style project in Jenkins? ",
    "rep": [
      " Create project by giving any name ",

      " Select Free style project ",

      " Click on build ",

      " Select execute windows batch command ",

      " Give any command (echo Hello Dear Students!!) ",

      " Select Save ",

      " Click on Build now ",

      " Finally can see Conso",
      "le output "
    ]
  },
  {
    "q": "104. What do you mean by Plugins in Jenkins? ",
    "rep": [
      " With Jenkins, nearly everything is a plugin and that nearly allfunctionality is provided by plugins. ",
      "You can think of Jenkins as little more than an executor of plugins.",
      " Plugins are small libraries that add new abilities to Jenkins andcan",
      "provide integration points to other tools. ",
      " Since nearly everything Jenkins does is because of a plugin,Jenkins ships with a small set of default ",
      "plugins, some of which can be upgraded independently of Jenkins "
    ]
  },
  {
    "q": "105. How to create Maven Project? ",
    "rep": [
      " Select new item ",

      " Copy the git hub maven project link and paste in git section inJenkins ",

      " Select build ",

      " Click on clean package ",

      " Select save ",

      " Click on Build now ",

      " Verify workspace contents with GitHub ",
      "side See console output "
    ]
  },
  {
    "q": "106. How can we Schedule projects? ",
    "rep": [
      "Sometimes, we might need some jobs to be executed after frequentintervals. To schedule a job, ",
      " Click on any project ",

      " Click on Configure ",

      " Select on Build triggers ",

      " Click on Build periodically ",

      " Give timing (* * * * *) ",

      " Select S",
      "ave ",
      " Can see automatic builds every 1 min ",

      " You can manually trigger build as well if you want"
    ]
  },
  {
    "q": "107. What do you mean by Upstream and Downstream projects?",
    "rep": [
      "We can also call them as linked projects. These are the ways throughwhich, we connect jobs one with other. In Upstream jobs, firstjob will trigger second job after build is over. In Downstream jobs,second job will wait till first job finishes its build. As andwhen first job finishes its work, then second job will betriggered automatically. In Upstream, first job will be active. InDownstream jobs, second job will be active. We can use any onetype to link multiple jobs. "
    ]
  },
  {
    "q": "108. What is view in Jenkins? ",
    "rep": [
      "We can customize view as per our needs. We can modify Jenkins homepage. We can segregate jobs as per the type of jobs like freestyle jobs and maven jobs and so on. To create custom view",
      " Select List of Related Projects ",

      " Select Default views ",

      " Click on All ",

      " Click on + and select Freestyle ",

      " Select List Views ",

      " Select Job filter ",

      " Select required jobs to be segregated ",

      " Now, you can see different view "
    ]
  },
  {
    "q": "109. What is User Administration in Jenkins? ",
    "rep": [
      "In Jenkins, we can create users, groups and can assign limitedprivileges to them so that, we can have better control onJenkins. Users will not install Jenkins in their machines. They accessJenkins as a ",
      "user. Here we cant assign permissions directly to users. Instead wecreate Roles and assign ",
      "permissions to those roles. These roles we attach to users so thatusers get the permissions whatever we assign to those roles."
    ]
  },
  {
    "q": "110. What is Global tool configuration in Jenkins? ",
    "rep": [
      "We install Java, Maven, Git and many other tools in our server.Whenever Jenkins need those tools, by default Jenkins willinstall them automatically every time. But ",
      "its not a good practice. Thats why ",
      "we give installed path of all these tools in Jenkins so that wheneverJenkins need them, automatically Jenkins pull them form localmachine instead of downloading every time. This way of giving path ofthese tools in Je",
      "nkins we call Global tool configuration "
    ]
  },
  {
    "q": "111. What is Build? ",
    "rep": [
      "Build means, Compile the source code, assembling of all class filesand finally creating deliverable ",
      "Compile: ",

      "Convert Source code into machine-readable format ",
      "Assembly (Linking): ",

      "Grouping all class files ",
      "Deliverable: ",

      ".war, .jar The above process is same for any type of code. Thisprocess we call Build. "
    ]
  },
  {
    "q": "112. What is Maven? ",
    "rep": [
      "Maven is one of the Build tools. It is the most advance build tool inthe market. In this, everything is already pre-configured. Mavenbelongs to Apache Company. We use maven to build Java code only.",
      "We cant build other codes by using Maven. By default, we get so manyplugins with Maven. You can ",
      "write your own plug-",
      "in as well. Mavens local repository is .M2 where we",
      "can get required ",
      "compilers and dependencies. Mavens main configuration file ispom.xml where we keep all ",
      "instructions to build. "
    ]
  },
  {
    "q": "113. Advantages of Maven? ",
    "rep": [
      " Automated tasks (Mention all in pom.xml) ",

      " Multiple Tasks at a time ",

      " Quality product ",

      " Minimize bad builds ",

      " Keep history ",

      " Save time ",
      "Save money "
    ]
  },
  {
    "q": "114. List of Build tools available in Market? ",
    "rep": [
      " C and C++: Make file ",

      " .Net: Visual studio ",

      " Java: Ant, Maven "
    ]
  },
  {
    "q": "115. What is the architecture of Maven? ",
    "rep": [
      "Main configuration file is pom.xml. For one project, there will beone workspace and one pom.xml Requirements for build: ",

      " Source code (Will be pulled from Git hub) ",

      " Compiler (Pulls from remote repo and then put them in local repo,from there, m",
      "aven pulls into Workspace) ",
      " Dependencies (Pulls from remote repo and then put them in localrepo, from there, maven pulls ",
      "into Workspace) "
    ]
  },
  {
    "q": "116. What is Mavens Build Life Cycle? ",
    "rep": [
      "In maven, we have different goals. These are ",
      " Generate resources (Depend",
      "encies) ",
      " Compile code ",
      " Unit test ",
      " Package (Build) ",
      " Install (in to local repo & artifactory) ",
      " Deploy (to servers) ",
      " Clean (delete all run time files) "
    ]
  },
  {
    "q": "117. What does POM.XML contains? ",
    "rep": [
      "POM.XML is mavens main configuration file where we keep all detailsrelated to project. It contains ",

      " Metadata about that project ",

      " Dependencies required to build the project ",

      " The kind of project ",

      " Kind of output you want (.jar, .war) ",

      " Descriptio",
      "n about that project "
    ]
  },
  {
    "q": "118. What is Multi-Module Project in Maven? ",
    "rep": [
      " Dividing big project into small modules, we call Multi ModuleProject. ",
      "Each module must have its own SRC folder & pom.xml so thatbuild will happen separately ",
      " To build all modules ",
      "with one command, there should be a parent pom.xml file. This callsall child pom.xml files automatically ",
      " In parent pom.xml file, need to mention the child pom.xml files inan order. "
    ]
  },
  {
    "q": "119. What is Nagios? ",
    "rep": [
      "Nagios is one of the monitoring tools. By using Nagios we can monitorand give alerts. Where ever you install Nagios that becomesNagios server. Monitoring is important, because we need to makesure that our servers should never go down. If at all in someexceptional cases server goes down, immediately we need alert inthe form of intimation so that we can take required action to bringthe server up immediately. So for this purpose, we use Nagios."
    ]
  },
  {
    "q": "120. Why do we have to use Nagios? ",
    "rep": [
      "There are many advantages in using Nagios ",
      " It is oldest & Latest (e",
      "very now and then, it is getting upgraded as per current marketrequirements) ",
      " Stable (we have been using this since so many years and it isperforming well) ",

      " By default, we get so many Plug",
      "-ins ",
      " It is having its own Database ",

      " Nagios is both Monitoring & Alerting tool. "
    ]
  },
  {
    "q": "121. How does Nagios works? ",
    "rep": [
      " We mention all details in configuration files what data to becollected from which machine ",

      " Nagios daemon reads those details about what data to be collected ",

      " Daemon use NRPE",
      "(Nagios Remote Plug-in Executer) plug-in to collect data form nodesand stores in its own database ",
      " Finally displays in Nagios dashboard"
    ]
  },
  {
    "q": "122. What is the Directory structure of Nagios? ",
    "rep": [
      "/usr/local/nagios/bin ",

      "binary files /usr/local/nagios/sbin ",

      "CGI files (to get web page) /usr/local/nagios/libexec ",

      "plugins /usr/local/nagios/share ",

      "PHP Files /usr/local/nagios/etc ",

      "\nconfiguration files /usr/local/nagios/var ",

      "logs /usr/local/nagios/var/status.dat(file) ",

      "database "
    ]
  },
  {
    "q": "123. What are the Important Configuration files in Nagios?",
    "rep": [
      "Nagios main configuration file is /usr/local/nagios/etc/nagios.cfg/usr/local/nagios/etc/objects/localhost.cfg/usr/local/nagios/etc/objects/contacts.cfg/usr/local/nagios/etc/objects/timeperiods.cfg/usr/local/nagios/etc/objects/commands.cfg/usr/local/nagios/etc/objects/templates.cfg (sample templates)"
    ]
  }
]
